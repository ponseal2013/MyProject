/*Обнуление*/
* {
	padding: 0;
	margin: 0;
	border: 0;
}

*, *:before, *:after {
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

:focus, :active {
	outline: none;
}

a:focus, a:active {
	outline: none;
}

nav, footer, header, aside {
	display: block;
}

html, body {
	height: 100%;
	width: 100%;
	font-size: 100%;
	line-height: 1;
	font-size: 14px;
	-ms-text-size-adjust: 100%;
	-moz-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
}

input, button, textarea {
	font-family: inherit;
}

input::-ms-clear {
	display: none;
}

button {
	cursor: pointer;
}

button::-moz-focus-inner {
	padding: 0;
	border: 0;
}

a, a:visited {
	text-decoration: none;
}

a:hover {
	text-decoration: none;
}

ul li {
	list-style: none;
}

img {
	vertical-align: top;
}

h1, h2, h3, h4, h5, h6 {
	font-size: inherit;
	font-weight: 400;
}

/*----------Конец обнуления----------*/

.example-block {
	/* Внутренний отступ блочных тегов */
	padding: 10px 20px 30px 5px;
	/*  padding: 10px 20px 30px 5px;
	10 - сверху, 20 - справа, 30 - снизу, 5 - слева.
	
	padding: 10px 20px 30px; - Здесь
	10 - сверху, 20 - слева и справа, 30 - снизу.

	padding: 10px 20px; - Здесь
	10 - сверху и снизу, 20 - слева и справа.

	padding: 10px; - Здесь 10 - со всех сторон
	...................
	Можно записывать в процентах, например: 
	padding: 10%

	Отрицательные значения не канают
	*/



	/*........................*/

	/* Внешний отступ блочных тегов */

	margin: 10px 10px 20px 30px;
	/* Значения записываются также как в padding
	Можно использовать отрицательные значения*/

	/****************************/

	/* Ширина блочных тегов */

	width: 500px;
	/* Жестская фиксация размера, при изменении размера экрана ширина не меняется */

	height: 150px;
	/* аналогично */

	/*********************************/

	/* Максимальная ширина блочных тегов */

	max-width: 400px;
	/* Задает только максимальную ширину, если родитель меньше по размеру, то будет подстраиваться под него*/

	min-width: 200px;
	/* аналогично */

	/*********************************/

	/* Управление содержанием блочного элемента*/

	overflow: visible;
	/*Если текст не влазиет в блок, его будет видно ниже*/
	overflow: hidden;
	/* Скрывает все, что вылазиет из блока */
	overflow: scroll;
	/* Скрывает все, что вылазиет из блока и добавляет скролы (верт и горизонт) даже если они там не нужны */
	overflow: auto;
	/* Скрывает все, что вылазиет из блока и добавляет скролл, если он там нужен */

	/***********************************/

	/* Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе */

	display: block;
	/* Заставляет строчный параметр стать блочным и на него действуют все свойства блочного */
	/* display: inline; - превращает блочный в строчный тег, т.е. полная противоположность block */
	/* display: inline-block; Оставляет тег строчным, но к нему теперь можно применить все свойства блочного тега */
	/* display: none; Временно удаляет блок, как-будто его не было. Соседний контент занимает его место */

	/* для наглядности добавим border */
	border: 1px solid #000;
}



.example-string {
	display: block;
	padding: 20px;
	/* Для строчных не работает*/
	margin: 20px;
	/* Для строчных не работает*/
	width: 500px;
	/* Для строчных не работает, кроме картинок*/
	max-width: 400px;
	/* Для строчных не работает*/
	height: 150px;
	/* Для строчных не работает, кроме картинок*/
	border: 1px solid #000;
}

.example-image {
	width: 100px;
	height: 150px;
}